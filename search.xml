<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[win10+hexo+github搭建个人博客]]></title>
    <url>%2F2017%2F07%2F12%2Fwin10-hexo-github%2F</url>
    <content type="text"><![CDATA[win10+hexo+github搭建个人博客 参考：https://hexo.io/，博客用于记录自己的学习工作历程 参考以下步骤安装 1、搭建环境准备（包括node.js和git环境，gitHub账户的配置）2、安装 配置Hexo,配置将Hexo与github page结合起来3、怎样发布文章 主题 推荐 主题4、Net的简单配置 添加sitemap和feed插件5、添加404 公益页面 安装并配置环境 win10+Node.js+git+github Node.js下载地址：https://nodejs.org/en/download/ Git下载地址：https://git-scm.com/ Github 地址：https://github.com 安装node.js 和 git 步骤省略，按默认傻瓜式安装即可 注册github账号并创建一个以 github昵称.github.io 命名的仓库 根据图中，注册一个github账号，昵称自定义，然后创建一个新项目，名字为：github昵称.github.io 项目创建完成之后，本地生成ssh 私钥和公钥，用于连接github认证，使用上面下载的git，打开git bash 12ssh-keygen -t rsa -C &quot;github注册邮箱（自定义）&quot; -f .ssh/shaonbean# -f 输出以昵称命名的公钥和私钥，方便记忆 公钥生成之后加到github上，方便后面的使用，用户本地和github进行ssh通信 到这里github设置告一段落 安装配置hexo 注：hexo安装前提需安装node.js 和git hexo官网：https://hexo.io/ hexo官方文档：https://hexo.io/docs/ 文中以J盘为例，创建目录github并创建字目录（用于存放项目） 12vdevops@shaon MINGW64 /j/github/shaonbean# 注： 如果是linux环境下搭建的hexo博客，不建议使用root权限 下载安装hexo 123npm install -g hexo-cli# 等待片刻，执行hexo如下图表示安装成功hexo 初始化博客 这里以shaonbean为博客目录，执行下面命令 123hexo init shaonbean # 创始化项目cd shaonbeannpm install 测试本地建站是否成功，输入： 1234hexo sINFO Start processingINFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.# 出现上面两行，即表示本地建站成功 初始化博客以后，能看到下图： 配置博客 博客根目录初始化完成之后进项自定义配置，这里用到_config.yml 自定义博客的相关信息 编辑_config.yml配置文件，进行修改，参考下面配置： 1234567title: itdevopssubtitle: DevOps is everythingdescription: From Zero to the DevOpsauthor: shaonbeanlanguage: zh-CNtimezone: Asia/Shanghai# language和timezone 有规范，注意格式 配置个人域名1url: http://vdevops.com 配置部署1234deploy: type: git repo: https://github.com/shaonbean/shaonbean.github.io.git branch: master repo项是之前Github上创建好的仓库的地址 123exec ssh-agent bashssh-add MYKEY# 这里是针对本地设置多个github账号进行操作 本地生成两对密钥对，然后在~/.ssh/目录下新建config文件，参考下面填入： 12345678910111213#————GitHub—————Host github HostName github.com User git PreferredAuthentications publickey IdentityFile ~/.ssh/id_rsa# github.ioHost github.io HostName github.com User git PreferredAuthentications publickey IdentityFile ~/.ssh/itdevops 测试本地ssh连接github是否正常 123ssh -T git@githubssh -T git@github.io# 笔者这里第二个账号没设置成功，临时使用的https方式进行的通信 使用https，github账号加密码的方式来进行hexo的部署。配置如下： 123456deploy: type: git #repo: git@github.io:shaonbean/shaonbean.github.io.git repo: https://shaonbean:shaonbeanpassword@github.com/shaonbean/shaonbean.github.io.git branch: master message: devops 配置完成之后，现在可以进到设置的项目目录里面通过hexo部署到github 进到你的项目目录。命令行执行下面命令： 12hexo g # 本地生成数据库文件，目录等hexo d # 部署到远程 新建一篇博客 1hexo new post &quot;devops&quot; 然后通过电脑编辑器（atom）对文章进行编辑，编辑完成之后，再次运行上面的生成，部署命令 123hexo g # 本地生成博客hexo d # 发布到远程hexo d -g #在部署前先生成 注： 安装git扩展 12npm install hexo-deployer-git --save# 没安装插件可能报错：deloyer not found:git ssh key报错 1234Permission denied (publickey).fatal: Could not read from remote repository.Please make sure you have the correct access rightsand the repository exists. 后面笔者会专门写一篇添加ssh 密钥的文章 部署完成可以看到github上面shaonbean.github.io，已经存在文件，通过浏览器访问如下： 从上面可以看出我们已经成功部署到远程，并能够正常访问。 配置博客主题 选择NexT，star最多，原因不多说知乎主题推荐：https://www.zhihu.com/question/24422335 12cd /j/github/shaonbean.github.io # 这里项目名可以自定义git clone https://github.com/iissnan/hexo-theme-next themes/next 更换主题完成后，访问： 参考链接 http://blog.csdn.net/gdutxiaoxu/article/details/53576018 http://www.jeyzhang.com/hexo-github-blog-building.html https://www.zrj96.com/post-471.html https://fuyis.me/2017/01/25/Hexo-theme-next-and-optimized-configuration/]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>%2F2017%2F07%2F12%2Fstart-next-config%2F</url>
    <content type="text"><![CDATA[开始使用 - NexT 使用文档 NexT 开始使用 主题配置 第三方服务 内建标签 进阶设定 常见问题 其他平台 开始使用 Hexo 是高效的静态站点生成框架，她基于 Node.js。 通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的 标签插件 来快速的插入特定形式的内容。在这篇文章中，假定你已经成功安装了 Hexo，并使用 Hexo 提供的命令创建了一个站点。 你可以访问 Hexo 的文档 了解如何安装 Hexo 在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。 为了描述方便，在以下说明中，将前者称为 站点配置文件， 后者称为 主题配置文件。 安装 NexT Hexo 安装主题的方式非常简单，只需要将主题文件拷贝至站点目录的 themes 目录下， 然后修改下配置文件即可。具体到 NexT 来说，安装步骤如下。 下载主题 如果你熟悉 Git， 建议你使用 克隆最新版本 的方式，之后的更新可以通过 git pull 来快速更新， 而不用再次下载压缩包替换。 克隆最新版本 下载稳定版本 在终端窗口下，定位到 Hexo 站点目录下。使用 Git checkout 代码： $ cd your-hexo-site $ git clone https://github.com/iissnan/hexo-theme-next themes/next 前往 NexT 版本 发布页面。 选择你所需要的版本，下载 Download 区域下的 Source Code (zip) 到本地。例如，下载 v0.4.0 版本： 解压所下载的压缩包至站点的 themes 目录下， 并将 解压后的文件夹名称（hexo-theme-next-0.4.0）更改为 next。 如果你对 Git 感兴趣，可以通过《Pro Git》这本书来学习。你可以访问我制作的一个 在线版本（第一版）。 启用主题 与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 站点配置文件， 找到 theme 字段，并将其值更改为 next。 启用 NexT 主题 theme: next 到此，NexT 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 hexo clean 来清除 Hexo 的缓存。 验证主题 首先启动 Hexo 本地站点，并开启调试模式（即加上 --debug），整个命令是 hexo s --debug。 在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出： INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop. 此时即可使用浏览器访问 http://localhost:4000，检查站点是否正确运行。 当你看到站点的外观与下图所示类似时即说明你已成功安装 NexT 主题。这是 NexT 默认的 Scheme —— Muse 现在，你已经成功安装并启用了 NexT 主题。下一步我们将要更改一些主题的设定，包括个性化以及集成第三方服务。 主题设定 选择 Scheme Scheme 是 NexT 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 Scheme 之间共用。目前 NexT 支持三种 Scheme，他们是： Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白 Mist - Muse 的紧凑版本，整洁有序的单栏外观 Pisces - 双栏 Scheme，小家碧玉似的清新 Scheme 的切换通过更改 主题配置文件，搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面注释 # 去除即可。 选择 Pisces Scheme #scheme: Muse #scheme: Mist scheme: Pisces 设置 语言 编辑 站点配置文件， 将 language 设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下： language: zh-Hans 目前 NexT 支持的语言如以下表格所示： 语言 代码 设定示例 English en language: en 简体中文 zh-Hans language: zh-Hans Français fr-FR language: fr-FR Português pt language: pt or language: pt-BR 繁體中文 zh-hk 或者 zh-tw language: zh-hk Русский язык ru language: ru Deutsch de language: de 日本語 ja language: ja Indonesian id language: id Korean ko language: ko 设置 菜单 菜单配置包括三个部分，第一是菜单项（名称和链接），第二是菜单项的显示文本，第三是菜单项对应的图标。 NexT 使用的是 Font Awesome 提供的图标， Font Awesome 提供了 600+ 的图标，可以满足绝大的多数的场景，同时无须担心在 Retina 屏幕下 图标模糊的问题。 编辑 主题配置文件，修改以下内容： 设定菜单内容，对应的字段是 menu。 菜单内容的设置格式是：item name: link。其中 item name 是一个名称，这个名称并不直接显示在页面上，她将用于匹配图标以及翻译。 菜单示例配置 menu: home: / archives: /archives #about: /about #categories: /categories tags: /tags #commonweal: /404.html 若你的站点运行在子目录中，请将链接前缀的 / 去掉 NexT 默认的菜单项有（标注 的项表示需要手动创建这个页面）： 键值 设定值 显示文本（简体中文） home home: / 主页 archives archives: /archives 归档页 categories categories: /categories 分类页 tags tags: /tags 标签页 about about: /about 关于页面 commonweal commonweal: /404.html 公益 404 设置菜单项的显示文本。在第一步中设置的菜单的名称并不直接用于界面上的展示。Hexo 在生成的时候将使用 这个名称查找对应的语言翻译，并提取显示文本。这些翻译文本放置在 NexT 主题目录下的 languages/{language}.yml （{language} 为你所使用的语言）。 以简体中文为例，若你需要添加一个菜单项，比如 something。那么就需要修改简体中文对应的翻译文件 languages/zh-Hans.yml，在 menu 字段下添加一项： menu: home: 首页 archives: 归档 categories: 分类 tags: 标签 about: 关于 search: 搜索 commonweal: 公益404 something: 有料 设定菜单项的图标，对应的字段是 menu_icons。 此设定格式是 item name: icon name，其中 item name 与上一步所配置的菜单名字对应，icon name 是 Font Awesome 图标的 名字。而 enable 可用于控制是否显示图标，你可以设置成 false 来去掉图标。 菜单图标配置示例 menu_icons: enable: true # Icon Mapping. home: home about: user categories: th tags: tags archives: archive commonweal: heartbeat 在菜单图标开启的情况下，如果菜单项与菜单未匹配（没有设置或者无效的 Font Awesome 图标名字） 的情况下，NexT 将会使用 作为图标。 请注意键值（如 home）的大小写要严格匹配 设置 侧栏 默认情况下，侧栏仅在文章页面（拥有目录列表）时才显示，并放置于右侧位置。 可以通过修改 主题配置文件 中的 sidebar 字段来控制侧栏的行为。侧栏的设置包括两个部分，其一是侧栏的位置， 其二是侧栏显示的时机。 设置侧栏的位置，修改 sidebar.position 的值，支持的选项有： left - 靠左放置 right - 靠右放置 目前仅 Pisces Scheme 支持 position 配置。影响版本5.0.0及更低版本。 sidebar: position: left 设置侧栏显示的时机，修改 sidebar.display 的值，支持的选项有： post - 默认行为，在文章页面（拥有目录列表）时显示 always - 在所有页面中都显示 hide - 在所有页面中都隐藏（可以手动展开） remove - 完全移除 sidebar: display: post 已知侧栏在 use motion: false 的情况下不会展示。 影响版本5.0.0及更低版本。 设置 头像 编辑 主题配置文件， 修改字段 avatar， 值设置成头像的链接地址。其中，头像的链接地址可以是： 地址 值 完整的互联网 URI http://example.com/avatar.png 站点内的地址 将头像放置主题目录下的 source/uploads/ （新建 uploads 目录若不存在） 配置为：avatar: /uploads/avatar.png 或者 放置在 source/images/ 目录下 配置为：avatar: /images/avatar.png 头像设置示例 avatar: http://example.com/avatar.png 设置 作者昵称 编辑 站点配置文件， 设置 author 为你的昵称。 站点描述 编辑 站点配置文件， 设置 description 字段为你的站点描述。站点描述可以是你喜欢的一句签名:) 集成常用的第三方服务 百度统计 注意： baidu_analytics 不是你的百度 id 或者 百度统计 id 登录 百度统计， 定位到站点的代码获取页面 复制 hm.js? 后面那串统计脚本 id，如： 编辑 主题配置文件， 修改字段 baidu_analytics 字段，值设置成你的百度统计脚本 id。 阅读次数统计（LeanCloud） 由 Doublemine 贡献 请查看 为NexT主题添加文章阅读量统计功能 Algolia 搜索 详细的配置请参考： 第三方服务 - Algolia 文档问题反馈 返回顶部 安装 NexT 下载 NexT 主题 启用 NexT 主题 验证是否正确启用 主题设定 选择「Scheme」 设置「界面语言」 设置「菜单」 设置「侧栏」 设置「头像」 设置「作者昵称」 设置「站点描述」 集成第三方服务 百度统计 阅读次数统计（LeanCloud） Algolia 搜索 回到顶部 &copy; Made by IIssNan 文档问题反馈 文档 @ GitHub (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){ (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o), m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m) })(window,document,'script','//www.google-analytics.com/analytics.js','ga'); ga('create', 'UA-75665289-1', 'auto'); ga('send', 'pageview');]]></content>
  </entry>
  <entry>
    <title><![CDATA[hexo next 主题设置]]></title>
    <url>%2F2017%2F07%2F12%2Fhexo-next-config%2F</url>
    <content type="text"><![CDATA[自定义next主题 参考文档：http://theme-next.iissnan.com/http://theme-next.iissnan.com/getting-started.html 指定404页面 1234567891011&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;]\ &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;404&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;http://www.qq.com/404/search_children.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 安装本地搜索 1234567npm install hexo-generator-search --save# search## Docs：https://github.com/PaicHyperionDev/hexo-generator-searchsearch: path: search.xml field: all 网站底部字数统计 123456在（博客主目录） /themes/next/layout/_partials/footer.swig 中最后加上&lt;div class=&quot;theme-info&quot;&gt; &lt;div class=&quot;powered-by&quot;&gt;&lt;/div&gt; &lt;span class=&quot;post-count&quot;&gt;博客全站共&#123;&#123; totalcount(site) &#125;&#125;字&lt;/span&gt;&lt;/div&gt; atom 1npm install hexo-generator-feed --save http://theme-next.iissnan.com/theme-settings.html Hexo之next主题设置首页不显示全文(只显示预览) 1用文本编辑器打开主题配置_config.yml文件，搜索&quot;auto_excerpt&quot;,false --&gt; true]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F07%2F11%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Web服务器 .svn隐藏文件夹漏洞修复和杜绝]]></title>
    <url>%2F2017%2F07%2F11%2Ffix_svn_bug%2F</url>
    <content type="text"><![CDATA[Web服务器 .svn隐藏文件夹漏洞利用、修复和杜绝 在SVN的使用中，会自动生成一个名为.svn的隐藏文件夹，其中包含重要的源代码信息,如果在发布代码时，直接复制代码文件夹到Web服务器，同时.svn隐藏文件夹也被上传到程序根目录，可以利用.svn/entries文件，获取到服务器源码、svn服务器账号密码等信息。 隐藏文件夹是怎么来的？** 从svn获取发布版本时，没有正确使用svn导出功能导致！ 黑客是如何利用svn隐藏文件漏洞的？ 1、漏洞利用工具：Seay SVN漏洞利用工具 2、添加网站url，在被利用的网址后面加/.svn/entries就能列出来网站目录，甚至下载整站 修复漏洞 在web服务器配置文件中增加一段代码，过滤到.svn文件，返回404 123456789101112131415# nginx服务器：location ~ ^(.*)\/\.svn\/&#123;return 404;&#125;# 更改完成，重启nginx#Apache服务器：&lt;Directory ~ &quot;\.svn&quot;&gt;Order allow,denyDeny from all&lt;/Directory&gt;# 更改完成，重启apache 查找服务器上所有.svn隐藏文件夹，删除 依次执行下面命令，在项目目录下删除.svn文件夹 12345# 以web根目录/data/www/ 为例find . -type d -name &quot;.svn&quot;|xargs rm -rfrm -rf `find . -type d -name .svn`find . -name &quot;.svn&quot; -type d | xargs rm -frfind . -name &quot;.svn&quot; -type d | xargs -n1 rm -R 使用脚本一次性删除.svn目录 1234567#!/bin/shcd /data/wwwfind ./ -name &quot;.svn&quot; | xargs -n1 echo &gt; /dev/null 2&gt;&amp;1find ./ -name &quot;.svn&quot; -print0 | xargs -0 rm -frif [ $? -ne 0 ]; thenecho &quot;remove .svn dirs failed!&quot;fi 脚本执行完成，会自动删除/data/www目录及子目录所有.svn隐藏文件夹]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>svn</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hello-devops]]></title>
    <url>%2F2017%2F07%2F11%2Fhello-devops%2F</url>
    <content type="text"><![CDATA[What is the DevOps? DevOps is everything for me!]]></content>
      <categories>
        <category>devops</category>
      </categories>
      <tags>
        <tag>DevOps</tag>
      </tags>
  </entry>
</search>